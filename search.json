[{"path":"https://amirfeizi.github.io/otargen/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 otargen authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://amirfeizi.github.io/otargen/articles/web_only/Contributingguidelines.html","id":"contributing-to-otargen","dir":"Articles > Web_only","previous_headings":"","what":"Contributing to otargen","title":"Contributing guidelines","text":"document outlines propose change otargen package.","code":""},{"path":"https://amirfeizi.github.io/otargen/articles/web_only/Contributingguidelines.html","id":"pull-request-process","dir":"Articles > Web_only","previous_headings":"","what":"Pull request process","title":"Contributing guidelines","text":"recommend create Git branch pull request (PR). use roxygen2, Markdown syntax, documentation. use testthat. Contributions test cases included easier accept. user-facing changes, add bullet top NEWS.md current development version header describing changes made followed GitHub username, links relevant issue(s)/PR(s).","code":""},{"path":"https://amirfeizi.github.io/otargen/articles/web_only/Contributingguidelines.html","id":"prerequisites","dir":"Articles > Web_only","previous_headings":"","what":"Prerequisites","title":"Contributing guidelines","text":"make substantial pull request, always file issue make sure someone developer team agrees ’s problem. ’ve found bug, create associated issue illustrate bug.","code":""},{"path":"https://amirfeizi.github.io/otargen/articles/web_only/Contributingguidelines.html","id":"code-of-conduct","dir":"Articles > Web_only","previous_headings":"","what":"Code of Conduct","title":"Contributing guidelines","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (https://www.contributor-covenant.org/version/2/1/code_of_conduct/)","code":""},{"path":"https://amirfeizi.github.io/otargen/articles/web_only/introduction.html","id":"introduction","dir":"Articles > Web_only","previous_headings":"","what":"Introduction","title":"examples","text":"otargen package provides seamless access Open Targets Platform API, enabling researchers query gene-disease associations, variant annotations, pharmacogenomics, . vignette demonstrates examples major functional areas otargen, organized categories GWAS, genetic constraint analysis, variants, pharmacogenomics, .","code":""},{"path":[]},{"path":"https://amirfeizi.github.io/otargen/articles/web_only/introduction.html","id":"example-gwas-credible-sets-for-gene-disease-associations","dir":"Articles > Web_only","previous_headings":"GWAS and Colocalisation","what":"Example: GWAS Credible Sets for Gene-Disease Associations","title":"examples","text":"Objective: Identify causal variants linking gene disease using GWAS credible sets.Function: gwasCredibleSetsQuery","code":"# Retrieve GWAS credible sets for APOE and Alzheimer’s disease result <- gwasCredibleSetsQuery(   ensemblId = \"ENSG00000198125\",   efoId = \"EFO_0003767\",   size = 5 ) print(result) #> NULL"},{"path":[]},{"path":"https://amirfeizi.github.io/otargen/articles/web_only/introduction.html","id":"example-genetic-constraint-analysis","dir":"Articles > Web_only","previous_headings":"Genetic Analysis","what":"Example: Genetic Constraint Analysis","title":"examples","text":"Objective: Assess gene’s tolerance mutations using genetic constraint metrics like pLI LOEUF.Function: geneticConstraintQuery","code":"# Retrieve genetic constraint data for TP53 result <- geneticConstraintQuery(ensgId = \"ENSG00000141510\") print(result) #> # A tibble: 3 × 6 #>   constraintType  score upperBin upperBin6 geneId          approvedSymbol #>   <chr>           <dbl>    <int>     <int> <chr>           <chr>          #> 1 syn            -0.544       NA        NA ENSG00000141510 TP53           #> 2 mis             0.983       NA        NA ENSG00000141510 TP53           #> 3 lof             0.532        2         1 ENSG00000141510 TP53"},{"path":[]},{"path":"https://amirfeizi.github.io/otargen/articles/web_only/introduction.html","id":"example-clinical-variant-evidence","dir":"Articles > Web_only","previous_headings":"Variants and Annotations","what":"Example: Clinical Variant Evidence","title":"examples","text":"Objective: Explore ClinVar evidence gene-disease associations uncover clinical significance.Function: clinVarQuery","code":"# Retrieve ClinVar evidence for CFTR and cystic fibrosis result <- clinVarQuery(   ensemblId = \"ENSG00000080815\",   efoId = \"MONDO_0004975\",   size = 5 ) print(result) #> # A tibble: 5 × 24 #>   variantEffect directionOnTrait diseaseFromSource   variantRsId studyId      #>   <chr>         <chr>            <chr>               <chr>       <chr>        #> 1 LoF           risk             Alzheimer disease 3 rs63750219  RCV002470967 #> 2 NA            risk             Alzheimer disease 3 rs63750450  RCV001199924 #> 3 NA            risk             Alzheimer disease 3 rs63750083  RCV000019785 #> 4 NA            risk             Alzheimer disease 3 rs63750082  RCV000995615 #> 5 NA            risk             Alzheimer disease 3 rs63751024  RCV001808318 #> # ℹ 19 more variables: clinicalSignificances <list>, #> #   allelicRequirements <list>, alleleOrigins <list>, confidence <chr>, #> #   literature <list>, cohortPhenotypes <list>, disease.id <chr>, #> #   disease.name <chr>, variant.id <chr>, variant.hgvsId <chr>, #> #   variant.referenceAllele <chr>, variant.alternateAllele <chr>, #> #   variantFunctionalConsequence.id <chr>, #> #   variantFunctionalConsequence.label <chr>, approvedSymbol <chr>, …"},{"path":"https://amirfeizi.github.io/otargen/articles/web_only/introduction.html","id":"example-uniprot-variants","dir":"Articles > Web_only","previous_headings":"Variants and Annotations","what":"Example: UniProt Variants","title":"examples","text":"Objective: Annotate variants functional data UniProt understand biological impact.Function: uniProtVariantsQuery","code":"# Retrieve UniProt variants for a specific variant result <- uniProtVariantsQuery(variantId = \"12_111446804_T_C\") print(result) #> NULL"},{"path":[]},{"path":"https://amirfeizi.github.io/otargen/articles/web_only/introduction.html","id":"example-pharmacogenomics-insights","dir":"Articles > Web_only","previous_headings":"Pharmacogenomics","what":"Example: Pharmacogenomics Insights","title":"examples","text":"Objective: Investigate genetic variants influence drug response using pharmacogenomics data.Function: pharmacogenomicsQuery","code":"# Retrieve pharmacogenomics data for atorvastatin result <- pharmacogenomicsChemblQuery(chemblId = \"CHEMBL1016\") print(result) #> # A tibble: 24 × 17 #>    variantRsId genotypeId       haplotypeId haplotypeFromSourceId isDirectTarget #>    <chr>       <chr>            <lgl>       <lgl>                 <lgl>          #>  1 rs3758785   11_94398973_A_A… NA          NA                    FALSE          #>  2 rs1275988   2_26691496_C_T,T NA          NA                    FALSE          #>  3 rs3184504   12_111446804_T_… NA          NA                    FALSE          #>  4 rs6722745   2_108258788_T_C… NA          NA                    FALSE          #>  5 rs3184504   12_111446804_T_… NA          NA                    FALSE          #>  6 rs5186      3_148742201_A_A… NA          NA                    TRUE           #>  7 rs6722745   2_108258788_T_C… NA          NA                    FALSE          #>  8 rs740406    19_2232222_A_A,G NA          NA                    FALSE          #>  9 rs740406    19_2232222_A_A,G NA          NA                    FALSE          #> 10 rs740406    19_2232222_A_G,G NA          NA                    FALSE          #> # ℹ 14 more rows #> # ℹ 12 more variables: phenotypeFromSourceId <lgl>, #> #   genotypeAnnotationText <chr>, phenotypeText <chr>, pgxCategory <chr>, #> #   evidenceLevel <chr>, studyId <chr>, literature <list>, #> #   variantFunctionalConsequence.id <chr>, #> #   variantFunctionalConsequence.label <chr>, target.id <chr>, #> #   target.approvedSymbol <chr>, drugId <chr>"},{"path":"https://amirfeizi.github.io/otargen/articles/web_only/introduction.html","id":"additional-functions-and-categories","dir":"Articles > Web_only","previous_headings":"","what":"Additional Functions and Categories","title":"examples","text":"Beyond examples , otargen includes many queries grouped logical categories: compGenomicsQuery depMapQuery interactionsQuery hallmarksQuery mousePhenotypesQuery safetyQuery pathwaysQuery geneOntologyQuery europePMCQuery orphanetQuery genomicsEnglandQuery chemblQuery indicationsQuery See package reference documentation details functions parameters.","code":""},{"path":"https://amirfeizi.github.io/otargen/articles/web_only/introduction.html","id":"learn-more","dir":"Articles > Web_only","previous_headings":"","what":"Learn More","title":"examples","text":"full list available queries example usage: browse function reference pkgdown site.","code":"help(package = \"otargen\")"},{"path":"https://amirfeizi.github.io/otargen/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Amir Feizi. Author, maintainer.","code":""},{"path":"https://amirfeizi.github.io/otargen/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Feizi (2025). otargen: Access Open Target. R package version 2.0.0, https://amirfeizi.github.io/otargen/.","code":"@Manual{,   title = {otargen: Access Open Target},   author = {Amir Feizi},   year = {2025},   note = {R package version 2.0.0},   url = {https://amirfeizi.github.io/otargen/}, }"},{"path":"https://amirfeizi.github.io/otargen/index.html","id":"unified-access-to-open-targets-platform-data-","dir":"","previous_headings":"","what":"Unified Access to Open Targets Platform Data 🔍","title":"otargen","text":"otargen open-source R package provides streamlined tidy interface retrieving analyzing drug target data Open Targets Platform. enables researchers access gene-disease associations, target safety, tractability, evidence types, — within R environment.","code":""},{"path":"https://amirfeizi.github.io/otargen/index.html","id":"mega-otargen-200--major-release","dir":"","previous_headings":"Unified Access to Open Targets Platform Data 🔍","what":"📣 otargen 2.0.0 — Major Release","title":"otargen","text":"🚨 Important Notice: Following Open Targets’ announcement, Open Targets Genetics officially merged Open Targets Platform API. Consequently, otargen 2.0.0 represents complete overhaul package’s functionality support unified API endpoint schema.","code":""},{"path":"https://amirfeizi.github.io/otargen/index.html","id":"id_-whats-new-in-200","dir":"","previous_headings":"Unified Access to Open Targets Platform Data 🔍","what":"🆕 What’s New in 2.0.0","title":"otargen","text":"🔁 Unified API Integration: Full migration deprecated Open Targets Genetics GraphQL API new Platform GraphQL API. 🔍 Expanded Query Support: Includes major data types now available merged schema. 📘 Updated Documentation: help files vignettes rewritten reflect new function usage. 📄 New Example Articles: Learn use new API queries fresh, practical use cases. ⚠️ Deprecation process: redanndant query functions version 1.1.5 deprecated 2.0.0. However, keep queries plotting functions still provide useful data long supported backend API. 👉 highly recommend upgrading 2.0.0 installing CRAN GitHub.","code":""},{"path":"https://amirfeizi.github.io/otargen/index.html","id":"installation","dir":"","previous_headings":"Unified Access to Open Targets Platform Data 🔍","what":"Installation","title":"otargen","text":"CRAN: GitHub (development version):","code":"install.packages(\"otargen\") if (!require(\"devtools\")) install.packages(\"devtools\") devtools::install_github(\"amirfeizi/otargen\")"},{"path":"https://amirfeizi.github.io/otargen/index.html","id":"id_-examples-of-new-queries","dir":"","previous_headings":"Unified Access to Open Targets Platform Data 🔍","what":"🧪 Examples of New Queries","title":"otargen","text":"examples new query functions otargen 2.0.0: (Refer ?gene_disease_associations_query help files full parameter lists example outputs.)","code":"# Retrieve GWAS credible set data result <- gwasCredibleSetsQuery(ensemblId = \"ENSG00000105397\", efoId = \"EFO_0000685\", size = 500)  # Retrieve ChEMBL data for a specified gene and disease. result <- chemblQuery(ensemblId = \"ENSG00000080815\", efoId = \"MONDO_0004975\", size = 10)  # Retrieve Pharmacogenomics data for a specified drug. result <- pharmacogenomicsChemblQuery(chemblId = \"CHEMBL1016\")  # Retrieve ClinVar data for a specified gene and disease. result <- clinVarQuery(ensemblId = \"ENSG00000080815\", efoId = \"MONDO_0004975\", size = 10)  # Retrieve Safety Liabilities data for a specified gene result <- safetyQuery(ensgId = \"ENSG00000141510\")  # Retrieve UniProt Variants data for a specified variant. result <- uniProtVariantsQuery(variantId = \"4_1804392_G_A\")"},{"path":"https://amirfeizi.github.io/otargen/index.html","id":"citing-otargen","dir":"","previous_headings":"Unified Access to Open Targets Platform Data 🔍","what":"Citing otargen","title":"otargen","text":"Please cite otargen use research: 📄 Feizi & Ray, Bioinformatics","code":""},{"path":"https://amirfeizi.github.io/otargen/index.html","id":"features","dir":"","previous_headings":"Unified Access to Open Targets Platform Data 🔍","what":"Features","title":"otargen","text":"⚡ Fast, declarative API querying 🧭 Schema-aware helpers key data types 📊 Built-visualizations 📚 Example vignettes reproducible workflows","code":""},{"path":"https://amirfeizi.github.io/otargen/index.html","id":"join-the-community","dir":"","previous_headings":"Unified Access to Open Targets Platform Data 🔍","what":"Join the Community","title":"otargen","text":"Visit GitHub repo: https://github.com/amirfeizi/otargen welcome contributions, issue reports, feedback!","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/adverseEventsQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Adverse Events data for a specified drug. — adverseEventsQuery","title":"Retrieve Adverse Events data for a specified drug. — adverseEventsQuery","text":"function queries Open Targets GraphQL API retrieve adverse events data specified drug.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/adverseEventsQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Adverse Events data for a specified drug. — adverseEventsQuery","text":"","code":"adverseEventsQuery(chemblId, index = 0, size = 10)"},{"path":"https://amirfeizi.github.io/otargen/reference/adverseEventsQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Adverse Events data for a specified drug. — adverseEventsQuery","text":"chemblId Character: ChEMBL ID target drug (e.g., \"CHEMBL1016\"). index Integer: Page index pagination (default: 0). size Integer: Number records retrieve (default: 10).","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/adverseEventsQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Adverse Events data for a specified drug. — adverseEventsQuery","text":"Returns tibble containing adverse events data specified drug.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/adverseEventsQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Adverse Events data for a specified drug. — adverseEventsQuery","text":"","code":"if (FALSE) { # \\dontrun{ result <- adverseEventsQuery(chemblId = \"CHEMBL1016\", size = 10) result <- adverseEventsQuery(chemblId = \"CHEMBL1016\", index = 0, size = 10) } # }"},{"path":"https://amirfeizi.github.io/otargen/reference/chemblQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve ChEMBL data for a specified gene and disease. — chemblQuery","title":"Retrieve ChEMBL data for a specified gene and disease. — chemblQuery","text":"function queries Open Targets GraphQL API retrieve ChEMBL evidence data specified gene disease.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/chemblQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve ChEMBL data for a specified gene and disease. — chemblQuery","text":"","code":"chemblQuery(ensemblId, efoId, cursor = NULL, size = 10)"},{"path":"https://amirfeizi.github.io/otargen/reference/chemblQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve ChEMBL data for a specified gene and disease. — chemblQuery","text":"ensemblId Character: ENSEMBL ID target gene (e.g., \"ENSG00000080815\"). efoId Character: EFO ID target disease (e.g., \"MONDO_0004975\"). cursor Character: Cursor pagination (default: NULL). size Integer: Number records retrieve (default: 10).","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/chemblQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve ChEMBL data for a specified gene and disease. — chemblQuery","text":"Returns tibble containing ChEMBL evidence data specified gene disease.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/chemblQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve ChEMBL data for a specified gene and disease. — chemblQuery","text":"","code":"if (FALSE) { # \\dontrun{ result <- chemblQuery(ensemblId = \"ENSG00000080815\", efoId =  \"MONDO_0004975\",  size = 10) result <- chemblQuery(ensemblId = \"ENSG00000080815\", efoId =  \"MONDO_0004975\",  cursor = NULL, size = 10) } # }"},{"path":"https://amirfeizi.github.io/otargen/reference/clinVarQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve ClinVar data for a specified gene and disease. — clinVarQuery","title":"Retrieve ClinVar data for a specified gene and disease. — clinVarQuery","text":"function queries Open Targets GraphQL API retrieve ClinVar evidence data specified gene disease.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/clinVarQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve ClinVar data for a specified gene and disease. — clinVarQuery","text":"","code":"clinVarQuery(ensemblId, efoId, cursor = NULL, size = 10)"},{"path":"https://amirfeizi.github.io/otargen/reference/clinVarQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve ClinVar data for a specified gene and disease. — clinVarQuery","text":"ensemblId Character: ENSEMBL ID target gene (e.g., \"ENSG00000080815\"). efoId Character: EFO ID target disease (e.g., \"MONDO_0004975\"). cursor Character: Cursor pagination (default: NULL). size Integer: Number records retrieve (default: 10).","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/clinVarQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve ClinVar data for a specified gene and disease. — clinVarQuery","text":"Returns tibble containing ClinVar evidence data specified gene disease.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/clinVarQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve ClinVar data for a specified gene and disease. — clinVarQuery","text":"","code":"if (FALSE) { # \\dontrun{ result <- clinVarQuery(ensemblId = \"ENSG00000080815\", efoId =  \"MONDO_0004975\", size = 10) result <- clinVarQuery(ensemblId = \"ENSG00000080815\", efoId =  \"MONDO_0004975\", cursor = NULL, size = 10) } # }"},{"path":"https://amirfeizi.github.io/otargen/reference/compGenomicsQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Comparative Genomics data for a specified gene. — compGenomicsQuery","title":"Retrieve Comparative Genomics data for a specified gene. — compGenomicsQuery","text":"function queries Open Targets  GraphQL API retrieve comparative genomics data specified gene.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/compGenomicsQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Comparative Genomics data for a specified gene. — compGenomicsQuery","text":"","code":"compGenomicsQuery(ensemblId)"},{"path":"https://amirfeizi.github.io/otargen/reference/compGenomicsQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Comparative Genomics data for a specified gene. — compGenomicsQuery","text":"ensemblId Character: ENSEMBL ID target gene (e.g., ENSG00000169174).","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/compGenomicsQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Comparative Genomics data for a specified gene. — compGenomicsQuery","text":"Returns data frame containing comparative genomics data specified gene.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/compGenomicsQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Comparative Genomics data for a specified gene. — compGenomicsQuery","text":"","code":"if (FALSE) { # \\dontrun{ result <- compGenomicsQuery(ensemblId = \"ENSG00000169174\") } # }"},{"path":"https://amirfeizi.github.io/otargen/reference/depMapQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve DepMap Essentiality data for a specified gene. — depMapQuery","title":"Retrieve DepMap Essentiality data for a specified gene. — depMapQuery","text":"function queries Open Targets GraphQL API retrieve DepMap essentiality data specified gene.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/depMapQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve DepMap Essentiality data for a specified gene. — depMapQuery","text":"","code":"depMapQuery(ensgId)"},{"path":"https://amirfeizi.github.io/otargen/reference/depMapQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve DepMap Essentiality data for a specified gene. — depMapQuery","text":"ensgId Character: ENSEMBL ID target gene (e.g., ENSG00000141510).","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/depMapQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve DepMap Essentiality data for a specified gene. — depMapQuery","text":"Returns tibble containing DepMap essentiality data specified gene.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/depMapQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve DepMap Essentiality data for a specified gene. — depMapQuery","text":"","code":"if (FALSE) { # \\dontrun{ result <- depMapQuery(ensgId = \"ENSG00000141510\") } # }"},{"path":"https://amirfeizi.github.io/otargen/reference/europePMCQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Europe PMC data for a specified gene and disease. — europePMCQuery","title":"Retrieve Europe PMC data for a specified gene and disease. — europePMCQuery","text":"function queries Open Targets GraphQL API retrieve Europe PMC evidence data specified gene disease.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/europePMCQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Europe PMC data for a specified gene and disease. — europePMCQuery","text":"","code":"europePMCQuery(ensemblId, efoId, cursor = NULL, size = 50)"},{"path":"https://amirfeizi.github.io/otargen/reference/europePMCQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Europe PMC data for a specified gene and disease. — europePMCQuery","text":"ensemblId Character: ENSEMBL ID target gene (e.g., \"ENSG00000080815\"). efoId Character: EFO ID target disease (e.g., \"MONDO_0004975\"). cursor Character: Cursor pagination (default: NULL). size Integer: Number records retrieve (default: 50).","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/europePMCQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Europe PMC data for a specified gene and disease. — europePMCQuery","text":"Returns tibble containing Europe PMC evidence data specified gene disease.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/europePMCQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Europe PMC data for a specified gene and disease. — europePMCQuery","text":"","code":"if (FALSE) { # \\dontrun{ result <- europePMCQuery(ensemblId = \"ENSG00000080815\",  efoId = \"MONDO_0004975\", size = 50) result <- europePMCQuery(ensemblId = \"ENSG00000080815\",  efoId = \"MONDO_0004975\", cursor = NULL, size = 50) } # }"},{"path":"https://amirfeizi.github.io/otargen/reference/geneBurdenQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Gene Burden data for a specified gene and disease. — geneBurdenQuery","title":"Retrieve Gene Burden data for a specified gene and disease. — geneBurdenQuery","text":"function queries Open Targets GraphQL API retrieve gene burden evidence data specified gene disease.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/geneBurdenQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Gene Burden data for a specified gene and disease. — geneBurdenQuery","text":"","code":"geneBurdenQuery(ensemblId, efoId, size = 3500)"},{"path":"https://amirfeizi.github.io/otargen/reference/geneBurdenQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Gene Burden data for a specified gene and disease. — geneBurdenQuery","text":"ensemblId Character: ENSEMBL ID target gene (e.g., \"ENSG00000137642\"). efoId Character: EFO ID target disease (e.g., \"MONDO_0004975\"). size Integer: Number records retrieve (default: 3500).","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/geneBurdenQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Gene Burden data for a specified gene and disease. — geneBurdenQuery","text":"Returns tibble containing gene burden evidence data specified gene disease.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/geneBurdenQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Gene Burden data for a specified gene and disease. — geneBurdenQuery","text":"","code":"if (FALSE) { # \\dontrun{ result <- geneBurdenQuery(ensemblId = \"ENSG00000137642\", efoId =  \"MONDO_0004975\", size = 3500) } # }"},{"path":"https://amirfeizi.github.io/otargen/reference/geneOntologyQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Gene Ontology data for a specified gene. — geneOntologyQuery","title":"Retrieve Gene Ontology data for a specified gene. — geneOntologyQuery","text":"function queries Open Targets GraphQL API retrieve gene ontology data specified gene.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/geneOntologyQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Gene Ontology data for a specified gene. — geneOntologyQuery","text":"","code":"geneOntologyQuery(ensgId)"},{"path":"https://amirfeizi.github.io/otargen/reference/geneOntologyQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Gene Ontology data for a specified gene. — geneOntologyQuery","text":"ensgId Character: ENSEMBL ID target gene (e.g., ENSG00000141510).","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/geneOntologyQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Gene Ontology data for a specified gene. — geneOntologyQuery","text":"Returns tibble containing gene ontology data specified gene.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/geneOntologyQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Gene Ontology data for a specified gene. — geneOntologyQuery","text":"","code":"if (FALSE) { # \\dontrun{ result <- geneOntologyQuery(ensgId = \"ENSG00000141510\") } # }"},{"path":"https://amirfeizi.github.io/otargen/reference/geneticConstraintQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Genetic Constraint data for a specified gene. — geneticConstraintQuery","title":"Retrieve Genetic Constraint data for a specified gene. — geneticConstraintQuery","text":"function queries Open Targets Platform GraphQL API retrieve genetic constraint data specified gene, pLI LOEUF scores.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/geneticConstraintQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Genetic Constraint data for a specified gene. — geneticConstraintQuery","text":"","code":"geneticConstraintQuery(ensgId)"},{"path":"https://amirfeizi.github.io/otargen/reference/geneticConstraintQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Genetic Constraint data for a specified gene. — geneticConstraintQuery","text":"ensgId Character: ENSEMBL ID target gene (e.g., \"ENSG00000141510\").","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/geneticConstraintQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Genetic Constraint data for a specified gene. — geneticConstraintQuery","text":"Returns tibble containing genetic constraint data specified gene.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/geneticConstraintQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Genetic Constraint data for a specified gene. — geneticConstraintQuery","text":"","code":"if (FALSE) { # \\dontrun{ result <- geneticConstraintQuery(ensgId = \"ENSG00000141510\") } # }"},{"path":"https://amirfeizi.github.io/otargen/reference/genomicsEnglandQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Genomics England data for a specified gene and disease. — genomicsEnglandQuery","title":"Retrieve Genomics England data for a specified gene and disease. — genomicsEnglandQuery","text":"function queries Open Targets GraphQL API retrieve Genomics England evidence data specified gene disease.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/genomicsEnglandQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Genomics England data for a specified gene and disease. — genomicsEnglandQuery","text":"","code":"genomicsEnglandQuery(ensemblId, efoId, size = 3500)"},{"path":"https://amirfeizi.github.io/otargen/reference/genomicsEnglandQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Genomics England data for a specified gene and disease. — genomicsEnglandQuery","text":"ensemblId Character: ENSEMBL ID target gene (e.g., \"ENSG00000080815\"). efoId Character: EFO ID target disease (e.g., \"MONDO_0004975\"). size Integer: Number records retrieve (default: 3500).","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/genomicsEnglandQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Genomics England data for a specified gene and disease. — genomicsEnglandQuery","text":"Returns tibble containing Genomics England evidence data specified gene disease.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/genomicsEnglandQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Genomics England data for a specified gene and disease. — genomicsEnglandQuery","text":"","code":"if (FALSE) { # \\dontrun{ result <- genomicsEnglandQuery(ensemblId = \"ENSG00000080815\", efoId =  \"MONDO_0004975\", size = 3500) } # }"},{"path":"https://amirfeizi.github.io/otargen/reference/gwasColocalisation.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve calculated GWAS colocalisation data — gwasColocalisation","title":"Retrieve calculated GWAS colocalisation data — gwasColocalisation","text":"function retrieves colocalisation data specific study locus GWAS study GWAS studies. returns data frame studies colocalise input study locus, including details study, reported trait, index variant, calculated colocalisation method outputs.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/gwasColocalisation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve calculated GWAS colocalisation data — gwasColocalisation","text":"","code":"gwasColocalisation(study_locus_id, size = 500, index = 0)"},{"path":"https://amirfeizi.github.io/otargen/reference/gwasColocalisation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve calculated GWAS colocalisation data — gwasColocalisation","text":"study_locus_id Character: Open Target Genetics generated ID study locus (e.g., \"5a86bfd40d2ebecf6ce97bbe8a737512\"). size Integer: Number rows fetch per page. Default: 500. index Integer: Page index pagination. Default: 0.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/gwasColocalisation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve calculated GWAS colocalisation data — gwasColocalisation","text":"Returns data frame studies colocalise input study locus. table consists following data structure: study.studyId: Character vector. Study identifier. study.traitReported: Character vector. Reported trait associated colocalisation. study.projectId: Character vector. Project identifier study. study.publicationFirstAuthor: Character vector. First author publication. indexVariant.id: Character vector. Index variant identifier. indexVariant.position: Integer vector. Index variant position. indexVariant.chromosome: Character vector. Index variant chromosome. indexVariant.referenceAllele: Character vector. Reference allele variant. indexVariant.alternateAllele: Character vector. Alternate allele variant. pValueMantissa: Numeric vector. Mantissa p-value colocalisation. pValueExponent: Integer vector. Exponent p-value colocalisation. numberColocalisingVariants: Integer vector. Number colocalising variants. colocalisationMethod: Character vector. Method used colocalisation analysis. h3: Numeric vector. H3 value associated colocalisation. h4: Numeric vector. H4 value associated colocalisation. clpp: Numeric vector. Colocalisation posterior probability. betaRatioSignAverage: Numeric vector. Average sign beta ratio.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/gwasColocalisation.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Retrieve calculated GWAS colocalisation data — gwasColocalisation","text":"Giambartolomei, Claudia et al. “Bayesian test colocalisation pairs genetic association studies using summary statistics.” PLoS genetics vol. 10,5 e1004383. 15 May. 2014, doi:10.1371/journal.pgen.1004383","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/gwasColocalisation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve calculated GWAS colocalisation data — gwasColocalisation","text":"","code":"if (FALSE) { # \\dontrun{ colocalisation_data <- gwasColocalisation(study_locus_id = \"5a86bfd40d2ebecf6ce97bbe8a737512\",  size = 500, index = 0) } # }"},{"path":"https://amirfeizi.github.io/otargen/reference/gwasCredibleSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve GWAS credible set data — gwasCredibleSet","title":"Retrieve GWAS credible set data — gwasCredibleSet","text":"Provided study ID lead variant ID, function returns data frame consisting associated credible set tag variants  corresponding statistical data.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/gwasCredibleSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve GWAS credible set data — gwasCredibleSet","text":"","code":"gwasCredibleSet(study_id, variant_id)"},{"path":"https://amirfeizi.github.io/otargen/reference/gwasCredibleSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve GWAS credible set data — gwasCredibleSet","text":"study_id Character: Study ID(s) generated Open Targets (e.g GCST90002357). variant_id Character: generated ID variants Open Targets (e.g. 1_154119580_C_A) rsId (rs2494663).","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/gwasCredibleSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve GWAS credible set data — gwasCredibleSet","text":"Returns data frame results credible set variants specific lead variant following columns: tagVariant.id: Data frame. table IDs tag variant. tagVariant.rsId: Character vector. rsID tag variant. beta: Numeric. Beta value. postProb: Numeric. Posterior probability. pval: Numeric. P-value. se: Numeric. Standard error. MultisignalMethod: Character vector. Multisignal method. logABF: Numeric. Logarithm approximate Bayes factor. is95: Logical. Indicates variant 95 is99: Logical. Indicates variant 99","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/gwasCredibleSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve GWAS credible set data — gwasCredibleSet","text":"","code":"if (FALSE) { # \\dontrun{ result <- gwasCredibleSet(study_id=\"GCST90002357\",  variant_id=\"1_154119580_C_A\") result <- gwasCredibleSet(study_id=\"GCST90002357\", variant_id=\"rs2494663\") } # }"},{"path":"https://amirfeizi.github.io/otargen/reference/gwasCredibleSetsQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve GWAS Credible Sets data for a specified target and disease. — gwasCredibleSetsQuery","title":"Retrieve GWAS Credible Sets data for a specified target and disease. — gwasCredibleSetsQuery","text":"function queries Open Targets Platform GraphQL API retrieve GWAS credible sets evidence data specified target gene disease.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/gwasCredibleSetsQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve GWAS Credible Sets data for a specified target and disease. — gwasCredibleSetsQuery","text":"","code":"gwasCredibleSetsQuery(ensemblId, efoId, size = 500)"},{"path":"https://amirfeizi.github.io/otargen/reference/gwasCredibleSetsQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve GWAS Credible Sets data for a specified target and disease. — gwasCredibleSetsQuery","text":"ensemblId Character. Ensembl gene ID, e.g., \"ENSG00000169174\". efoId Character. EFO disease ID, e.g., \"EFO_0004911\". size Integer. Number rows fetch. Default: 500.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/gwasCredibleSetsQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve GWAS Credible Sets data for a specified target and disease. — gwasCredibleSetsQuery","text":"tibble credible set evidence NULL data found.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/gwasCredibleSetsQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve GWAS Credible Sets data for a specified target and disease. — gwasCredibleSetsQuery","text":"","code":"if (FALSE) { # \\dontrun{   result <- gwasCredibleSetsQuery(     ensemblId = \"ENSG00000169174\",     efoId = \"EFO_0004911\",     size = 5   )   print(result) } # }"},{"path":"https://amirfeizi.github.io/otargen/reference/hallmarksQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Cancer Hallmarks data for a specified gene. — hallmarksQuery","title":"Retrieve Cancer Hallmarks data for a specified gene. — hallmarksQuery","text":"function queries Open Targets GraphQL API retrieve cancer hallmarks data specified gene.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/hallmarksQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Cancer Hallmarks data for a specified gene. — hallmarksQuery","text":"","code":"hallmarksQuery(ensgId)"},{"path":"https://amirfeizi.github.io/otargen/reference/hallmarksQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Cancer Hallmarks data for a specified gene. — hallmarksQuery","text":"ensgId Character: ENSEMBL ID target gene (e.g., ENSG00000141510).","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/hallmarksQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Cancer Hallmarks data for a specified gene. — hallmarksQuery","text":"Returns tibble containing cancer hallmarks data specified gene.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/hallmarksQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Cancer Hallmarks data for a specified gene. — hallmarksQuery","text":"","code":"if (FALSE) { # \\dontrun{ result <- hallmarksQuery(ensgId = \"ENSG00000141510\") } # }"},{"path":"https://amirfeizi.github.io/otargen/reference/indicationsQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Indications data for a specified drug. — indicationsQuery","title":"Retrieve Indications data for a specified drug. — indicationsQuery","text":"function queries Open Targets GraphQL API retrieve indications data specified drug.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/indicationsQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Indications data for a specified drug. — indicationsQuery","text":"","code":"indicationsQuery(chemblId)"},{"path":"https://amirfeizi.github.io/otargen/reference/indicationsQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Indications data for a specified drug. — indicationsQuery","text":"chemblId Character: ChEMBL ID target drug (e.g., \"CHEMBL1016\").","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/indicationsQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Indications data for a specified drug. — indicationsQuery","text":"Returns tibble containing indications data specified drug.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/indicationsQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Indications data for a specified drug. — indicationsQuery","text":"","code":"if (FALSE) { # \\dontrun{ result <- indicationsQuery(chemblId = \"CHEMBL1016\") } # }"},{"path":"https://amirfeizi.github.io/otargen/reference/interactionsQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Interactions data for a specified gene. — interactionsQuery","title":"Retrieve Interactions data for a specified gene. — interactionsQuery","text":"function queries Open Targets GraphQL API retrieve molecular interaction data specified gene.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/interactionsQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Interactions data for a specified gene. — interactionsQuery","text":"","code":"interactionsQuery(ensgId, sourceDatabase = NULL, index = 0, size = 10)"},{"path":"https://amirfeizi.github.io/otargen/reference/interactionsQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Interactions data for a specified gene. — interactionsQuery","text":"ensgId Character: ENSEMBL ID target gene (e.g., ENSG00000141510). sourceDatabase Character: Source database interactions (e.g., \"intact\") (default: NULL). index Integer: Page index pagination (default: 0). size Integer: Number records retrieve (default: 10).","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/interactionsQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Interactions data for a specified gene. — interactionsQuery","text":"Returns tibble containing interactions data specified gene.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/interactionsQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Interactions data for a specified gene. — interactionsQuery","text":"","code":"if (FALSE) { # \\dontrun{ result <- interactionsQuery(ensgId = \"ENSG00000141510\",  sourceDatabase = \"intact\", size = 10) result <- interactionsQuery(ensgId = \"ENSG00000141510\",  sourceDatabase = \"intact\", index = 0, size = 10) } # }"},{"path":"https://amirfeizi.github.io/otargen/reference/knownDrugsChemblQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Known Drugs data for a specified drug. — knownDrugsChemblQuery","title":"Retrieve Known Drugs data for a specified drug. — knownDrugsChemblQuery","text":"function queries Open Targets GraphQL API retrieve known drugs data specified drug.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/knownDrugsChemblQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Known Drugs data for a specified drug. — knownDrugsChemblQuery","text":"","code":"knownDrugsChemblQuery(chemblId, cursor = NULL, freeTextQuery = NULL, size = 10)"},{"path":"https://amirfeizi.github.io/otargen/reference/knownDrugsChemblQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Known Drugs data for a specified drug. — knownDrugsChemblQuery","text":"chemblId Character: ChEMBL ID target drug (e.g., \"CHEMBL1016\"). cursor Character: Cursor pagination (default: NULL). freeTextQuery Character: Free text query filter results (default: NULL). size Integer: Number records retrieve (default: 10).","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/knownDrugsChemblQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Known Drugs data for a specified drug. — knownDrugsChemblQuery","text":"Returns tibble containing known drugs data specified drug.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/knownDrugsChemblQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Known Drugs data for a specified drug. — knownDrugsChemblQuery","text":"","code":"if (FALSE) { # \\dontrun{ result <- knownDrugsChemblQuery(chemblId = \"CHEMBL1016\", size = 10) result <- knownDrugsChemblQuery(chemblId = \"CHEMBL1016\", cursor = NULL,  freeTextQuery = NULL, size = 10) } # }"},{"path":"https://amirfeizi.github.io/otargen/reference/knownDrugsGeneQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Known Drugs data for a specified gene. — knownDrugsGeneQuery","title":"Retrieve Known Drugs data for a specified gene. — knownDrugsGeneQuery","text":"function queries Open Targets GraphQL API retrieve known drugs data specified gene.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/knownDrugsGeneQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Known Drugs data for a specified gene. — knownDrugsGeneQuery","text":"","code":"knownDrugsGeneQuery(ensgId, cursor = NULL, freeTextQuery = NULL, size = 10)"},{"path":"https://amirfeizi.github.io/otargen/reference/knownDrugsGeneQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Known Drugs data for a specified gene. — knownDrugsGeneQuery","text":"ensgId Character: ENSEMBL ID target gene (e.g., ENSG00000169174). cursor Character: Cursor pagination (default: NULL). freeTextQuery Character: Free text query filter results (default: NULL). size Integer: Number records retrieve (default: 10).","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/knownDrugsGeneQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Known Drugs data for a specified gene. — knownDrugsGeneQuery","text":"Returns data frame containing known drugs data specified gene.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/knownDrugsGeneQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Known Drugs data for a specified gene. — knownDrugsGeneQuery","text":"","code":"if (FALSE) { # \\dontrun{ result <- knownDrugsGeneQuery(ensgId = \"ENSG00000169174\", size = 10) result <- knownDrugsGeneQuery(ensgId = \"ENSG00000169174\",  cursor = NULL, freeTextQuery = NULL, size = 10) } # }"},{"path":"https://amirfeizi.github.io/otargen/reference/locus2GeneQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Locus-to-Gene Predictions data for a specified study locus. — locus2GeneQuery","title":"Retrieve Locus-to-Gene Predictions data for a specified study locus. — locus2GeneQuery","text":"function queries Open Targets GraphQL API retrieve locus--gene prediction data specified study locus.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/locus2GeneQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Locus-to-Gene Predictions data for a specified study locus. — locus2GeneQuery","text":"","code":"locus2GeneQuery(studyLocusId)"},{"path":"https://amirfeizi.github.io/otargen/reference/locus2GeneQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Locus-to-Gene Predictions data for a specified study locus. — locus2GeneQuery","text":"studyLocusId Character: ID target study locus (e.g., \"fa375739ca2a6b825ce5cc69d117e84b\").","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/locus2GeneQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Locus-to-Gene Predictions data for a specified study locus. — locus2GeneQuery","text":"Returns tibble containing locus--gene prediction data specified study locus.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/locus2GeneQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Locus-to-Gene Predictions data for a specified study locus. — locus2GeneQuery","text":"","code":"if (FALSE) { # \\dontrun{ result <- locus2GeneQuery(studyLocusId = \"fa375739ca2a6b825ce5cc69d117e84b\") } # }"},{"path":"https://amirfeizi.github.io/otargen/reference/mechanismsOfActionQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Mechanisms of Action data for a specified drug. — mechanismsOfActionQuery","title":"Retrieve Mechanisms of Action data for a specified drug. — mechanismsOfActionQuery","text":"function queries Open Targets GraphQL API retrieve mechanisms action data specified drug.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/mechanismsOfActionQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Mechanisms of Action data for a specified drug. — mechanismsOfActionQuery","text":"","code":"mechanismsOfActionQuery(chemblId)"},{"path":"https://amirfeizi.github.io/otargen/reference/mechanismsOfActionQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Mechanisms of Action data for a specified drug. — mechanismsOfActionQuery","text":"chemblId Character: ChEMBL ID target drug (e.g., \"CHEMBL1016\").","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/mechanismsOfActionQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Mechanisms of Action data for a specified drug. — mechanismsOfActionQuery","text":"Returns tibble containing mechanisms action data specified drug.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/mechanismsOfActionQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Mechanisms of Action data for a specified drug. — mechanismsOfActionQuery","text":"","code":"if (FALSE) { # \\dontrun{ result <- mechanismsOfActionQuery(chemblId = \"CHEMBL1016\") } # }"},{"path":"https://amirfeizi.github.io/otargen/reference/mousePhenotypesQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Mouse Phenotypes data for a specified gene. — mousePhenotypesQuery","title":"Retrieve Mouse Phenotypes data for a specified gene. — mousePhenotypesQuery","text":"function queries Open Targets GraphQL API retrieve mouse phenotypes data specified gene.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/mousePhenotypesQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Mouse Phenotypes data for a specified gene. — mousePhenotypesQuery","text":"","code":"mousePhenotypesQuery(ensemblId)"},{"path":"https://amirfeizi.github.io/otargen/reference/mousePhenotypesQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Mouse Phenotypes data for a specified gene. — mousePhenotypesQuery","text":"ensemblId Character: ENSEMBL ID target gene (e.g., ENSG00000169174).","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/mousePhenotypesQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Mouse Phenotypes data for a specified gene. — mousePhenotypesQuery","text":"Returns data frame containing mouse phenotypes data specified gene.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/mousePhenotypesQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Mouse Phenotypes data for a specified gene. — mousePhenotypesQuery","text":"","code":"if (FALSE) { # \\dontrun{ result <- mousePhenotypesQuery(ensemblId = \"ENSG00000169174\") } # }"},{"path":"https://amirfeizi.github.io/otargen/reference/orphanetQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Orphanet data for a specified gene and disease. — orphanetQuery","title":"Retrieve Orphanet data for a specified gene and disease. — orphanetQuery","text":"function queries Open Targets GraphQL API retrieve Orphanet evidence data specified gene disease.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/orphanetQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Orphanet data for a specified gene and disease. — orphanetQuery","text":"","code":"orphanetQuery(ensemblId, efoId, size = 3500)"},{"path":"https://amirfeizi.github.io/otargen/reference/orphanetQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Orphanet data for a specified gene and disease. — orphanetQuery","text":"ensemblId Character: ENSEMBL ID target gene (e.g., \"ENSG00000080815\"). efoId Character: EFO ID target disease (e.g., \"MONDO_0004975\"). size Integer: Number records retrieve (default: 3500).","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/orphanetQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Orphanet data for a specified gene and disease. — orphanetQuery","text":"Returns tibble containing Orphanet evidence data specified gene disease.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/orphanetQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Orphanet data for a specified gene and disease. — orphanetQuery","text":"","code":"if (FALSE) { # \\dontrun{ result <- orphanetQuery(ensemblId = \"ENSG00000080815\", efoId =  \"MONDO_0004975\", size = 3500) } # }"},{"path":"https://amirfeizi.github.io/otargen/reference/overlapInfoForStudy.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves overlap info for a study and a list of studies — overlapInfoForStudy","title":"Retrieves overlap info for a study and a list of studies — overlapInfoForStudy","text":"input study ID list study IDs, function returns two elements. One contains overlap information table format, element variant intersection set, representing overlap two variants two given studies.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/overlapInfoForStudy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves overlap info for a study and a list of studies — overlapInfoForStudy","text":"","code":"overlapInfoForStudy(study_id, study_ids = list())"},{"path":"https://amirfeizi.github.io/otargen/reference/overlapInfoForStudy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves overlap info for a study and a list of studies — overlapInfoForStudy","text":"study_id Character: Study ID(s) generated Open Targets (e.g GCST90002357). study_ids Character: generated ID variants Open Targets (e.g. 1_154119580_C_A) rsId (rs2494663).","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/overlapInfoForStudy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieves overlap info for a study and a list of studies — overlapInfoForStudy","text":"list containing data frame overlap information variant intersection set. overlap information table (overlap_info) consists following columns: studyId: Character vector. Study ID. traitReported: Character vector. Reported trait. traitCategory: Character vector. Trait category. variantIdA: Character vector. Variant ID study . variantIdB: Character vector. Variant ID study B. overlapAB: Integer vector. Number overlaps variants B. distinctA: Integer vector. Number distinct variants study . distinctB: Integer vector. Number distinct variants study B. study.studyId: Character vector. Study ID study list. study.traitReported: Character vector. Reported trait study list. study.traitCategory: Character vector. Trait category study list. variant intersection set (variant_intersection_set) character vector representing intersection variants.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/overlapInfoForStudy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieves overlap info for a study and a list of studies — overlapInfoForStudy","text":"","code":"if (FALSE) { # \\dontrun{ result <- overlapInfoForStudy(study_id = \"GCST90002357\",  study_ids = list(\"GCST90025975\", \"GCST90025962\")) } # }"},{"path":"https://amirfeizi.github.io/otargen/reference/pathwaysQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Pathways data for a specified gene. — pathwaysQuery","title":"Retrieve Pathways data for a specified gene. — pathwaysQuery","text":"function queries Open Targets GraphQL API retrieve pathways data specified gene.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/pathwaysQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Pathways data for a specified gene. — pathwaysQuery","text":"","code":"pathwaysQuery(ensgId)"},{"path":"https://amirfeizi.github.io/otargen/reference/pathwaysQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Pathways data for a specified gene. — pathwaysQuery","text":"ensgId Character: ENSEMBL ID target gene (e.g., ENSG00000105397).","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/pathwaysQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Pathways data for a specified gene. — pathwaysQuery","text":"Returns tibble containing pathways data specified gene.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/pathwaysQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Pathways data for a specified gene. — pathwaysQuery","text":"","code":"if (FALSE) { # \\dontrun{ result <- pathwaysQuery(ensgId = \"ENSG00000105397\") } # }"},{"path":"https://amirfeizi.github.io/otargen/reference/pharmacogenomicsChemblQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Pharmacogenomics data for a specified drug. — pharmacogenomicsChemblQuery","title":"Retrieve Pharmacogenomics data for a specified drug. — pharmacogenomicsChemblQuery","text":"function queries Open Targets GraphQL API retrieve pharmacogenomics data specified drug.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/pharmacogenomicsChemblQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Pharmacogenomics data for a specified drug. — pharmacogenomicsChemblQuery","text":"","code":"pharmacogenomicsChemblQuery(chemblId)"},{"path":"https://amirfeizi.github.io/otargen/reference/pharmacogenomicsChemblQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Pharmacogenomics data for a specified drug. — pharmacogenomicsChemblQuery","text":"chemblId Character: ChEMBL ID target drug (e.g., \"CHEMBL1016\").","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/pharmacogenomicsChemblQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Pharmacogenomics data for a specified drug. — pharmacogenomicsChemblQuery","text":"Returns tibble containing pharmacogenomics data specified drug.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/pharmacogenomicsChemblQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Pharmacogenomics data for a specified drug. — pharmacogenomicsChemblQuery","text":"","code":"if (FALSE) { # \\dontrun{ result <- pharmacogenomicsChemblQuery(chemblId = \"CHEMBL1016\") } # }"},{"path":"https://amirfeizi.github.io/otargen/reference/pharmacogenomicsGeneQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Pharmacogenomics data for a specified gene. — pharmacogenomicsGeneQuery","title":"Retrieve Pharmacogenomics data for a specified gene. — pharmacogenomicsGeneQuery","text":"function queries Open Targets GraphQL API retrieve pharmacogenomics data specified gene.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/pharmacogenomicsGeneQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Pharmacogenomics data for a specified gene. — pharmacogenomicsGeneQuery","text":"","code":"pharmacogenomicsGeneQuery(ensgId)"},{"path":"https://amirfeizi.github.io/otargen/reference/pharmacogenomicsGeneQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Pharmacogenomics data for a specified gene. — pharmacogenomicsGeneQuery","text":"ensgId Character: ENSEMBL ID target gene (e.g., ENSG00000141510).","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/pharmacogenomicsGeneQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Pharmacogenomics data for a specified gene. — pharmacogenomicsGeneQuery","text":"Returns tibble containing pharmacogenomics data specified gene.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/pharmacogenomicsGeneQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Pharmacogenomics data for a specified gene. — pharmacogenomicsGeneQuery","text":"","code":"if (FALSE) { # \\dontrun{ result <- pharmacogenomicsGeneQuery(ensgId = \"ENSG00000141510\") } # }"},{"path":"https://amirfeizi.github.io/otargen/reference/pharmacogenomicsVariantQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Pharmacogenomics data for a specified variant. — pharmacogenomicsVariantQuery","title":"Retrieve Pharmacogenomics data for a specified variant. — pharmacogenomicsVariantQuery","text":"function queries Open Targets GraphQL API retrieve pharmacogenomics data specified variant.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/pharmacogenomicsVariantQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Pharmacogenomics data for a specified variant. — pharmacogenomicsVariantQuery","text":"","code":"pharmacogenomicsVariantQuery(variantId)"},{"path":"https://amirfeizi.github.io/otargen/reference/pharmacogenomicsVariantQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Pharmacogenomics data for a specified variant. — pharmacogenomicsVariantQuery","text":"variantId Character: ID target variant (e.g., \"12_111446804_T_C\").","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/pharmacogenomicsVariantQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Pharmacogenomics data for a specified variant. — pharmacogenomicsVariantQuery","text":"Returns tibble containing pharmacogenomics data specified variant.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/pharmacogenomicsVariantQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Pharmacogenomics data for a specified variant. — pharmacogenomicsVariantQuery","text":"","code":"if (FALSE) { # \\dontrun{ result <- pharmacogenomicsVariantQuery(variantId = \"12_111446804_T_C\") } # }"},{"path":"https://amirfeizi.github.io/otargen/reference/qtlCredibleSetsQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve QTL Credible Sets data for a specified variant. — qtlCredibleSetsQuery","title":"Retrieve QTL Credible Sets data for a specified variant. — qtlCredibleSetsQuery","text":"function queries Open Targets GraphQL API retrieve QTL credible sets data specified variant.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/qtlCredibleSetsQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve QTL Credible Sets data for a specified variant. — qtlCredibleSetsQuery","text":"","code":"qtlCredibleSetsQuery(variantId, size = 500, index = 0)"},{"path":"https://amirfeizi.github.io/otargen/reference/qtlCredibleSetsQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve QTL Credible Sets data for a specified variant. — qtlCredibleSetsQuery","text":"variantId Character: ID target variant (e.g., \"19_10352442_G_C\"). size Integer: Number records retrieve (default: 500). index Integer: Page index pagination (default: 0).","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/qtlCredibleSetsQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve QTL Credible Sets data for a specified variant. — qtlCredibleSetsQuery","text":"Returns tibble containing QTL credible sets data specified variant.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/qtlCredibleSetsQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve QTL Credible Sets data for a specified variant. — qtlCredibleSetsQuery","text":"","code":"if (FALSE) { # \\dontrun{ result <- qtlCredibleSetsQuery(variantId = \"19_10352442_G_C\", size = 500,  index = 0) } # }"},{"path":"https://amirfeizi.github.io/otargen/reference/safetyQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Safety Liabilities data for a specified gene. — safetyQuery","title":"Retrieve Safety Liabilities data for a specified gene. — safetyQuery","text":"function queries Open Targets GraphQL API retrieve safety liabilities data specified gene.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/safetyQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Safety Liabilities data for a specified gene. — safetyQuery","text":"","code":"safetyQuery(ensgId)"},{"path":"https://amirfeizi.github.io/otargen/reference/safetyQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Safety Liabilities data for a specified gene. — safetyQuery","text":"ensgId Character: ENSEMBL ID target gene (e.g., ENSG00000141510).","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/safetyQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Safety Liabilities data for a specified gene. — safetyQuery","text":"Returns tibble containing safety liabilities data specified gene.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/safetyQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Safety Liabilities data for a specified gene. — safetyQuery","text":"","code":"if (FALSE) { # \\dontrun{ result <- safetyQuery(ensgId = \"ENSG00000141510\") } # }"},{"path":"https://amirfeizi.github.io/otargen/reference/sharedTraitStudiesQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Shared Trait Studies data for specified diseases. — sharedTraitStudiesQuery","title":"Retrieve Shared Trait Studies data for specified diseases. — sharedTraitStudiesQuery","text":"function queries Open Targets GraphQL API retrieve shared trait studies data specified disease IDs.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/sharedTraitStudiesQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Shared Trait Studies data for specified diseases. — sharedTraitStudiesQuery","text":"","code":"sharedTraitStudiesQuery(diseaseIds, size = 500, index = 0)"},{"path":"https://amirfeizi.github.io/otargen/reference/sharedTraitStudiesQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Shared Trait Studies data for specified diseases. — sharedTraitStudiesQuery","text":"diseaseIds Character vector: IDs target diseases (e.g., c(\"EFO_0004587\")). size Integer: Number records retrieve (default: 500). index Integer: Page index pagination (default: 0).","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/sharedTraitStudiesQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Shared Trait Studies data for specified diseases. — sharedTraitStudiesQuery","text":"Returns tibble containing shared trait studies data specified diseases.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/sharedTraitStudiesQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Shared Trait Studies data for specified diseases. — sharedTraitStudiesQuery","text":"","code":"if (FALSE) { # \\dontrun{ result <- sharedTraitStudiesQuery(diseaseIds = c(\"EFO_0004587\"), size = 500,  index = 0) } # }"},{"path":"https://amirfeizi.github.io/otargen/reference/uniProtVariantsQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve UniProt Variants data for a specified variant. — uniProtVariantsQuery","title":"Retrieve UniProt Variants data for a specified variant. — uniProtVariantsQuery","text":"function queries Open Targets GraphQL API retrieve UniProt variants data specified variant.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/uniProtVariantsQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve UniProt Variants data for a specified variant. — uniProtVariantsQuery","text":"","code":"uniProtVariantsQuery(variantId)"},{"path":"https://amirfeizi.github.io/otargen/reference/uniProtVariantsQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve UniProt Variants data for a specified variant. — uniProtVariantsQuery","text":"variantId Character: ID target variant (e.g., \"4_1804392_G_A\").","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/uniProtVariantsQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve UniProt Variants data for a specified variant. — uniProtVariantsQuery","text":"Returns tibble containing UniProt variants data specified variant.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/uniProtVariantsQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve UniProt Variants data for a specified variant. — uniProtVariantsQuery","text":"","code":"if (FALSE) { # \\dontrun{ result <- uniProtVariantsQuery(variantId = \"4_1804392_G_A\") } # }"},{"path":"https://amirfeizi.github.io/otargen/reference/uniprotLiteratureQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve UniProt Literature data for a specified gene and disease. — uniprotLiteratureQuery","title":"Retrieve UniProt Literature data for a specified gene and disease. — uniprotLiteratureQuery","text":"function queries Open Targets GraphQL API retrieve UniProt literature evidence data specified gene disease.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/uniprotLiteratureQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve UniProt Literature data for a specified gene and disease. — uniprotLiteratureQuery","text":"","code":"uniprotLiteratureQuery(ensemblId, efoId, size = 3500)"},{"path":"https://amirfeizi.github.io/otargen/reference/uniprotLiteratureQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve UniProt Literature data for a specified gene and disease. — uniprotLiteratureQuery","text":"ensemblId Character: ENSEMBL ID target gene (e.g., \"ENSG00000130203\"). efoId Character: EFO ID target disease (e.g., \"MONDO_0004975\"). size Integer: Number records retrieve (default: 3500).","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/uniprotLiteratureQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve UniProt Literature data for a specified gene and disease. — uniprotLiteratureQuery","text":"Returns tibble containing UniProt literature evidence data specified gene disease.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/uniprotLiteratureQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve UniProt Literature data for a specified gene and disease. — uniprotLiteratureQuery","text":"","code":"if (FALSE) { # \\dontrun{ result <- uniprotLiteratureQuery(ensemblId = \"ENSG00000130203\", efoId =  \"MONDO_0004975\", size = 3500) } # }"},{"path":"https://amirfeizi.github.io/otargen/reference/variantEffectPredictorQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Variant Effect Predictor data for a specified variant. — variantEffectPredictorQuery","title":"Retrieve Variant Effect Predictor data for a specified variant. — variantEffectPredictorQuery","text":"function queries Open Targets GraphQL API retrieve variant effect predictor data specified variant.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/variantEffectPredictorQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Variant Effect Predictor data for a specified variant. — variantEffectPredictorQuery","text":"","code":"variantEffectPredictorQuery(variantId)"},{"path":"https://amirfeizi.github.io/otargen/reference/variantEffectPredictorQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Variant Effect Predictor data for a specified variant. — variantEffectPredictorQuery","text":"variantId Character: ID target variant (e.g., \"4_1804392_G_A\").","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/variantEffectPredictorQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Variant Effect Predictor data for a specified variant. — variantEffectPredictorQuery","text":"Returns tibble containing variant effect predictor data specified variant.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/variantEffectPredictorQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Variant Effect Predictor data for a specified variant. — variantEffectPredictorQuery","text":"","code":"if (FALSE) { # \\dontrun{ result <- variantEffectPredictorQuery(variantId = \"4_1804392_G_A\") } # }"},{"path":"https://amirfeizi.github.io/otargen/reference/variantEffectQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Variant Effect data for a specified variant. — variantEffectQuery","title":"Retrieve Variant Effect data for a specified variant. — variantEffectQuery","text":"function queries Open Targets GraphQL API retrieve variant effect data specified variant.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/variantEffectQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Variant Effect data for a specified variant. — variantEffectQuery","text":"","code":"variantEffectQuery(variantId)"},{"path":"https://amirfeizi.github.io/otargen/reference/variantEffectQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Variant Effect data for a specified variant. — variantEffectQuery","text":"variantId Character: ID target variant (e.g., \"4_1804392_G_A\").","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/variantEffectQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Variant Effect data for a specified variant. — variantEffectQuery","text":"Returns tibble containing variant effect data specified variant.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/variantEffectQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Variant Effect data for a specified variant. — variantEffectQuery","text":"","code":"if (FALSE) { # \\dontrun{ result <- variantEffectQuery(variantId = \"4_1804392_G_A\") } # }"},{"path":"https://amirfeizi.github.io/otargen/reference/variantsQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Variants data for a specified study locus. — variantsQuery","title":"Retrieve Variants data for a specified study locus. — variantsQuery","text":"function queries Open Targets GraphQL API retrieve variants data specified study locus.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/variantsQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Variants data for a specified study locus. — variantsQuery","text":"","code":"variantsQuery(studyLocusId, size = 500, index = 0)"},{"path":"https://amirfeizi.github.io/otargen/reference/variantsQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Variants data for a specified study locus. — variantsQuery","text":"studyLocusId Character: ID target study locus (e.g., \"fa375739ca2a6b825ce5cc69d117e84b\"). size Integer: Number records retrieve (default: 500). index Integer: Page index pagination (default: 0).","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/variantsQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Variants data for a specified study locus. — variantsQuery","text":"Returns tibble containing variants data specified study locus.","code":""},{"path":"https://amirfeizi.github.io/otargen/reference/variantsQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Variants data for a specified study locus. — variantsQuery","text":"","code":"if (FALSE) { # \\dontrun{ result <- variantsQuery(studyLocusId = \"fa375739ca2a6b825ce5cc69d117e84b\",  size = 500, index = 0) } # }"},{"path":"https://amirfeizi.github.io/otargen/news/index.html","id":"otargen-200","dir":"Changelog","previous_headings":"","what":"otargen 2.0.0","title":"otargen 2.0.0","text":"CRAN release: 2025-07-15","code":""},{"path":"https://amirfeizi.github.io/otargen/news/index.html","id":"major-release-2-0-0","dir":"Changelog","previous_headings":"","what":"Major Release","title":"otargen 2.0.0","text":"Following Open Targets’ announcement, Open Targets Genetics officially merged Open Targets Platform API. Consequently, otargen 2.0.0 represents complete overhaul package’s functionality support unified API endpoint schema.","code":""},{"path":"https://amirfeizi.github.io/otargen/news/index.html","id":"whats-new-2-0-0","dir":"Changelog","previous_headings":"Major Release","what":"What’s New","title":"otargen 2.0.0","text":"🔁 Unified API Integration: Full migration deprecated Open Targets Genetics GraphQL API new Platform GraphQL API. 🔍 Expanded Query Support: Includes major data types now available merged schema. 📘 Updated Documentation: help files vignettes rewritten reflect new function usage. 📄 New Example Articles: Practical use cases demonstrating new API queries. ⚠️ Deprecation Notice: Many query functions version 1.1.5 now deprecated retained backward compatibility possible. highly recommend upgrading otargen 2.0.0 best experience latest Open Targets Platform API.","code":""},{"path":"https://amirfeizi.github.io/otargen/news/index.html","id":"otargen-115","dir":"Changelog","previous_headings":"","what":"otargen 1.1.5","title":"otargen 1.1.5","text":"CRAN release: 2024-09-21","code":""},{"path":[]},{"path":"https://amirfeizi.github.io/otargen/news/index.html","id":"added-frequently-requested-query-functions-from-open-target-to-the-package-1-1-5","dir":"Changelog","previous_headings":"","what":"Added frequently requested query functions from Open Target to the package","title":"otargen 1.1.5","text":"chemblQuery(): function queries Open Targets GraphQL API retrieve ChEMBL data specified gene disease, including evidence ChEMBL datasource. clinvarQuery(): function queries Open Targets GraphQL API retrieve ClinVar data specified gene disease, including evidence NCBI datasource. knownDrugsQuery(): function queries Open Targets GraphQL API retrieve known drugs data specified gene. mousePhenotypesQuery(): function queries Open Targets GraphQL API retrieve mouse phenotypes data specified gene. compGenomicsQuery() function queries Open Targets GraphQL API retrieve comparative genomics data specified gene.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://amirfeizi.github.io/otargen/news/index.html","id":"otargen-111","dir":"Changelog","previous_headings":"","what":"otargen 1.1.1","title":"otargen 1.1.1","text":"CRAN release: 2024-02-21","code":""},{"path":"https://amirfeizi.github.io/otargen/news/index.html","id":"updated-the-examples-article-1-1-1","dir":"Changelog","previous_headings":"","what":"Updated the examples article","title":"otargen 1.1.1","text":"Fixed several inconsistencies parameters naming functions used examples article main function package. Streamline examples description short organized. Added additional plotting case example 7 additional parameters added current version plot_l2g function.","code":""},{"path":"https://amirfeizi.github.io/otargen/news/index.html","id":"bug-fixes-1-1-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"otargen 1.1.1","text":"Fixed issue plot_l2g() function cases disease parameter selected. previous function plotting top disease one gene. function now updated two parameters expand plot_l2g() functionality plotting disease agnostic scenario. two parameters : top_n_disease (default: 1): Determines number top diseases plot gene, ranked L2G score. Increase value include diseases analysis. Use conjunction disease-agnostic dynamically select top diseases gene. l2g_cutoff (default: 0.5): Sets minimum L2G score threshold diseases considered plot. Increasing value can help reduce plot clutter focusing higher-confidence associations.","code":""},{"path":"https://amirfeizi.github.io/otargen/news/index.html","id":"otargen-110","dir":"Changelog","previous_headings":"","what":"otargen 1.1.0","title":"otargen 1.1.0","text":"CRAN release: 2023-12-12","code":""},{"path":"https://amirfeizi.github.io/otargen/news/index.html","id":"bug-fixes-1-1-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"otargen 1.1.0","text":"Fixed issue variantInfo function wrong variable (result) referenced, leading ‘object found’ error. Modified variantInfo() correctly process API response data. Additionally, added checks ensure results NULL processing, improves function’s robustness error handling.","code":""},{"path":"https://amirfeizi.github.io/otargen/news/index.html","id":"test-suite-enhancement-1-1-0","dir":"Changelog","previous_headings":"","what":"Test Suite Enhancement","title":"otargen 1.1.0","text":"Improved test plot_l2g.R test case provide better error handling diagnostic information. test now uses tryCatch block gracefully handle errors explicitly fail clear message, enhancing reliability maintainability test suite.","code":""},{"path":"https://amirfeizi.github.io/otargen/news/index.html","id":"bug-fix-1-1-0","dir":"Changelog","previous_headings":"","what":"Bug Fix","title":"otargen 1.1.0","text":"Fixed issue genesForVariant() giving error using rsId variants.","code":""},{"path":"https://amirfeizi.github.io/otargen/news/index.html","id":"code-improvement-1-1-0","dir":"Changelog","previous_headings":"","what":"Code Improvement","title":"otargen 1.1.0","text":"Updated functions include connection timeout checks. Added try-catch blocks handle timeouts API requests gracefully, ensuring functions provide informative error messages fail safely case network connection issues.","code":""},{"path":"https://amirfeizi.github.io/otargen/news/index.html","id":"otargen-100","dir":"Changelog","previous_headings":"","what":"otargen 1.0.0","title":"otargen 1.0.0","text":"CRAN release: 2023-06-23","code":""},{"path":"https://amirfeizi.github.io/otargen/news/index.html","id":"initial-release-1-0-0","dir":"Changelog","previous_headings":"","what":"Initial Release","title":"otargen 1.0.0","text":"first release otargen.","code":""}]
